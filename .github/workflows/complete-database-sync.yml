name: Complete Production to Development Sync

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "SYNC_ALL" to proceed with complete database sync (this will overwrite development data)'
        required: true
        default: ''

jobs:
  complete-sync:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'SYNC_ALL' }}
    
    env:
      PROD_DB_URL: ""
      DEV_DB_URL: ""
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install PostgreSQL 17 client
        run: |
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17 dnsutils curl jq
          echo "/usr/lib/postgresql/17/bin" >> $GITHUB_PATH
          export PATH="/usr/lib/postgresql/17/bin:$PATH"
          pg_dump --version
          psql --version

      - name: Configure database URLs
        run: |
          echo "Configuring database URLs..."
          if [ -n "${{ secrets.PROD_DB_POOLER_URL }}" ] && [ -n "${{ secrets.DEVELOP_DB_POOLER_URL }}" ]; then
            echo "‚úÖ Using pooler URLs"
            echo "PROD_DB_URL=${{ secrets.PROD_DB_POOLER_URL }}" >> $GITHUB_ENV
            echo "DEV_DB_URL=${{ secrets.DEVELOP_DB_POOLER_URL }}" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è  Using standard database URLs"
            echo "PROD_DB_URL=${{ secrets.PROD_SUPABASE_DB_URL }}" >> $GITHUB_ENV
            echo "DEV_DB_URL=${{ secrets.DEVELOP_SUPABASE_DB_URL }}" >> $GITHUB_ENV
          fi

      - name: Normalize database URLs
        run: |
          normalize() {
            local url="$1"
            if [[ "$url" != postgresql://* && "$url" != postgres://* ]]; then
              echo "ERROR: Invalid connection string" >&2
              exit 1
            fi
            if [[ "$url" == *\?* ]]; then
              if [[ "$url" != *sslmode=* ]]; then
                echo "${url}&sslmode=require"
              else
                echo "$url"
              fi
            else
              echo "${url}?sslmode=require"
            fi
          }
          PROD_DB_URL_NORM=$(normalize "${PROD_DB_URL}")
          DEV_DB_URL_NORM=$(normalize "${DEV_DB_URL}")
          echo "PROD_DB_URL_NORM=${PROD_DB_URL_NORM}" >> $GITHUB_ENV
          echo "DEV_DB_URL_NORM=${DEV_DB_URL_NORM}" >> $GITHUB_ENV

      - name: Call full project sync edge function
        run: |
          echo "üöÄ Initiating full project sync via edge function..."
          
          DEV_URL="${{ secrets.FUNDS_DEV_SUPABASE_URL }}"
          DEV_SERVICE_KEY="${{ secrets.FUNDS_DEV_SUPABASE_SERVICE_ROLE_KEY }}"
          
          # Call the full-project-sync edge function
          echo "Calling full-project-sync edge function..."
          
          response=$(curl -s -w "\n%{http_code}" -X POST \
               -H "Authorization: Bearer ${DEV_SERVICE_KEY}" \
               -H "apikey: ${DEV_SERVICE_KEY}" \
               -H "Content-Type: application/json" \
               -d '{}' \
               "${DEV_URL}/functions/v1/full-project-sync")
          
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "HTTP Status Code: $http_code"
          echo "Response:"
          echo "$response_body"
          
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Full project sync completed successfully"
            
            # Parse and display results
            if command -v jq &> /dev/null; then
              echo ""
              echo "=== SYNC SUMMARY ==="
              echo "$response_body" | jq -r '.message'
              echo ""
              echo "Operations completed:"
              echo "$response_body" | jq -r '.operations[] | "  - \(.operation): \(.status) - \(.details)"'
              echo ""
              echo "Overall statistics:"
              echo "$response_body" | jq -r '.summary | "  - Total operations: \(.total_operations)\n  - Successful: \(.successful_operations)\n  - Failed: \(.failed_operations)\n  - Warnings: \(.warnings)"'
            else
              echo "Response: $response_body"
            fi
          else
            echo "‚ùå Full project sync failed"
            echo "Error response: $response_body"
            exit 1
          fi

      - name: Summary
        run: |
          echo "üéâ Complete project sync finished!"
          echo ""
          echo "What was synced via edge function:"
          echo "  ‚úÖ All auth users from production to development"
          echo "  ‚úÖ All storage buckets and files"
          echo "  ‚úÖ All database tables and data from public schema"
          echo "  ‚úÖ Database functions, triggers, and RLS policies"
          echo "  ‚úÖ Complete project replication"
          echo ""
          echo "Your development environment is now a complete copy of production!"