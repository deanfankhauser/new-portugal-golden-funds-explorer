name: Sync Production to Development Database

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "CONFIRM" to proceed with database sync (this will overwrite development data)'
        required: true
        default: ''

jobs:
  sync-database:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'CONFIRM' }}
    
    env:
      PROD_DB_URL: ${{ secrets.PROD_SUPABASE_DB_URL }}
      DEV_DB_URL: ${{ secrets.DEVELOP_SUPABASE_DB_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify environment variables
        run: |
          if [ -z "${PROD_DB_URL}" ]; then
            echo "ERROR: PROD_SUPABASE_DB_URL secret is not set"
            exit 1
          fi
          if [ -z "${DEV_DB_URL}" ]; then
            echo "ERROR: DEVELOP_SUPABASE_DB_URL secret is not set"
            exit 1
          fi
          echo "SUCCESS: Required secrets are configured"

      - name: Create isolated temp directory
        run: |
          mkdir -p /tmp/db-sync
          cd /tmp/db-sync

      - name: Dump production database
        run: |
          echo "Starting production database dump..."
          cd /tmp/db-sync
          supabase db dump \
            --db-url "${PROD_DB_URL}" \
            --data-only=false \
            --use-copy=false \
            > production_dump.sql
          
          echo "Production dump completed"
          echo "Dump file size: $(du -h production_dump.sql | cut -f1)"

      - name: Backup development database
        run: |
          echo "Creating development backup before restore..."
          cd /tmp/db-sync
          BACKUP_FILE="dev_backup_$(date +%Y%m%d_%H%M%S).sql"
          supabase db dump \
            --db-url "${DEV_DB_URL}" \
            --data-only=false \
            --use-copy=false \
            > "${BACKUP_FILE}"
          
          echo "Development backup completed: ${BACKUP_FILE}"

      - name: Restore to development database
        run: |
          echo "Restoring production data to development..."
          cd /tmp/db-sync
          
          echo "Restoring production dump..."
          psql "${DEV_DB_URL}" < production_dump.sql
          
          echo "Database sync completed successfully!"

      - name: Verify sync
        run: |
          echo "Verifying sync by checking table counts..."
          
          echo "Production table counts:"
          psql "${PROD_DB_URL}" -c "SELECT schemaname, tablename, n_tup_ins + n_tup_upd + n_tup_del as total_rows FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY tablename;"
          
          echo ""
          echo "Development table counts:"
          psql "${DEV_DB_URL}" -c "SELECT schemaname, tablename, n_tup_ins + n_tup_upd + n_tup_del as total_rows FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY tablename;"

      - name: Cleanup
        run: |
          echo "Cleaning up temporary files..."
          rm -rf /tmp/db-sync
          echo "Cleanup completed"

      - name: Summary
        run: |
          echo "Database sync completed successfully!"
          echo ""
          echo "Summary:"
          echo "  - Production database dumped"
          echo "  - Development database backed up"
          echo "  - Production data restored to development"
          echo "  - Verification completed"
          echo ""
          echo "Note: The development database now contains production data."
          echo "Make sure to update any environment-specific configurations."