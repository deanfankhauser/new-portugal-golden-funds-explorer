name: Sync Production to Development Database

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "CONFIRM" to proceed with database sync (this will overwrite development data)'
        required: true
        default: ''

jobs:
  sync-database:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'CONFIRM' }}
    
    env:
      PROD_DB_URL: ${{ secrets.PROD_SUPABASE_DB_URL }}
      DEV_DB_URL: ${{ secrets.DEVELOP_SUPABASE_DB_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client dnsutils

      - name: Verify environment variables
        run: |
          if [ -z "${PROD_DB_URL}" ]; then
            echo "ERROR: PROD_SUPABASE_DB_URL secret is not set"
            exit 1
          fi
          if [ -z "${DEV_DB_URL}" ]; then
            echo "ERROR: DEVELOP_SUPABASE_DB_URL secret is not set"
            exit 1
          fi
          echo "SUCCESS: Required secrets are configured"

      - name: Validate and normalize DB URLs
        run: |
          normalize() {
            local url="$1"
            if [[ "$url" != postgresql://* && "$url" != postgres://* ]]; then
              echo "ERROR: Connection string must start with postgresql:// or postgres://" >&2
              echo "Got: (hidden)" >&2
              exit 1
            fi
            # Add IPv4 preference and ensure sslmode=require is present
            local params="sslmode=require&options=-c%20default_transaction_isolation=read_committed"
            if [[ "$url" == *\?* ]]; then
              if [[ "$url" != *sslmode=* ]]; then
                echo "${url}&${params}"
              else
                echo "${url}&options=-c%20default_transaction_isolation=read_committed"
              fi
            else
              echo "${url}?${params}"
            fi
          }
          PROD_DB_URL_NORM=$(normalize "${PROD_DB_URL}")
          DEV_DB_URL_NORM=$(normalize "${DEV_DB_URL}")
          echo "Normalized DB URLs configured."
          echo "PROD_DB_URL_NORM=${PROD_DB_URL_NORM}" >> $GITHUB_ENV
          echo "DEV_DB_URL_NORM=${DEV_DB_URL_NORM}" >> $GITHUB_ENV

      - name: Test database connectivity
        run: |
          echo "Testing connectivity to Supabase databases..."
          
          # Extract host from URL for testing
          PROD_HOST=$(echo "${PROD_DB_URL}" | sed -n 's/.*@\([^:]*\):.*/\1/p')
          DEV_HOST=$(echo "${DEV_DB_URL}" | sed -n 's/.*@\([^:]*\):.*/\1/p')
          
          echo "Production host: ${PROD_HOST}"
          echo "Development host: ${DEV_HOST}"
          
          # Test DNS resolution and connectivity
          echo "Testing DNS resolution..."
          nslookup "${PROD_HOST}" || echo "DNS resolution failed for production"
          nslookup "${DEV_HOST}" || echo "DNS resolution failed for development"
          
          echo "Testing port connectivity..."
          timeout 10 bash -c "</dev/tcp/${PROD_HOST}/5432" && echo "Production port 5432 reachable" || echo "Production port 5432 not reachable"
          timeout 10 bash -c "</dev/tcp/${DEV_HOST}/5432" && echo "Development port 5432 reachable" || echo "Development port 5432 not reachable"

      - name: Create isolated temp directory
        run: |
          mkdir -p /tmp/db-sync
          cd /tmp/db-sync

      - name: Dump production database
        run: |
          echo "Starting production database dump..."
          cd /tmp/db-sync
          echo "Using pg_dump (IPv4-friendly)..."
          export PGCONNECT_TIMEOUT=15
          pg_dump --no-owner --no-privileges --format=plain --verbose --dbname="${PROD_DB_URL_NORM}" > production_dump.sql
          
          echo "Production dump completed"
          echo "Dump file size: $(du -h production_dump.sql | cut -f1)"

      - name: Backup development database
        run: |
          echo "Creating development backup before restore..."
          cd /tmp/db-sync
          BACKUP_FILE="dev_backup_$(date +%Y%m%d_%H%M%S).sql"
          export PGCONNECT_TIMEOUT=15
          pg_dump --no-owner --no-privileges --format=plain --dbname="${DEV_DB_URL_NORM}" > "${BACKUP_FILE}"
          
          echo "Development backup completed: ${BACKUP_FILE}"

      - name: Restore to development database
        run: |
          echo "Restoring production data to development..."
          cd /tmp/db-sync
          
          echo "Restoring production dump..."
          psql "${DEV_DB_URL_NORM}" < production_dump.sql
          
          echo "Database sync completed successfully!"

      - name: Verify sync
        run: |
          echo "Verifying sync by checking table counts..."
          
          echo "Production table counts:"
          psql "${PROD_DB_URL_NORM}" -c "SELECT schemaname, tablename, n_tup_ins + n_tup_upd + n_tup_del as total_rows FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY tablename;"
          
          echo ""
          echo "Development table counts:"
          psql "${DEV_DB_URL_NORM}" -c "SELECT schemaname, tablename, n_tup_ins + n_tup_upd + n_tup_del as total_rows FROM pg_stat_user_tables WHERE schemaname = 'public' ORDER BY tablename;"

      - name: Cleanup
        run: |
          echo "Cleaning up temporary files..."
          rm -rf /tmp/db-sync
          echo "Cleanup completed"

      - name: Summary
        run: |
          echo "Database sync completed successfully!"
          echo ""
          echo "Summary:"
          echo "  - Production database dumped"
          echo "  - Development database backed up"
          echo "  - Production data restored to development"
          echo "  - Verification completed"
          echo ""
          echo "Note: The development database now contains production data."
          echo "Make sure to update any environment-specific configurations."